1+1
install.packages("Bchron")
.libPaths()
library(Bchron)
Bchronmenu()
library(Bchron)
Bchronmenu
Bchronmenu()
install.packages("Bchron")
install.packages("Bchron")
install.packages("Bchron")
.libPaths()
install.packages("Bchron")
install.packages("Bchron")
library(Bchron)
Bchronmenu
Bchronmenu()
Bchronmenu()
library(Bchron)
data(Glendalough)
GlenOut = Bchronology(ages=Glendalough$ages,ageSds=Glendalough$ageSds, calCurves=Glendalough$calCurves,positions=Glendalough$position, positionThicknesses=Glendalough$thickness,ids=Glendalough$id, predictPositions=seq(0,1500,by=10), iterations=10000)
help(Bchronology)
GlenOut = Bchronology(ages=Glendalough$ages,ageSds=Glendalough$ageSds, calCurves=Glendalough$calCurves,positions=Glendalough$position, positionThicknesses=Glendalough$thickness,ids=Glendalough$id, predictPositions=seq(0,1500,by=10), iterations=100000)
View(Glendalough)
data(Glendalough)
GlenOut = Bchronology(ages=Glendalough$ages,ageSds=Glendalough$ageSds, calCurves=Glendalough$calCurves,positions=Glendalough$position, positionThicknesses=Glendalough$thickness,ids=Glendalough$id, predictPositions=seq(0,1500,by=10), iterations=100000)
library(Bchron)
library("R.matlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
MD81_radiocarbon <- read.delim("~/Desktop/MD81_radiocarbon.txt")
MD81_depth <- read.table("~/Desktop/MD81_depth.txt", quote="\"")
run=Bchronology(ages=MD81_radiocarbon$ages,ageSds=MD81_radiocarbon$ageSds, calCurves=MD81_radiocarbon$CalCurves,positions=MD81_radiocarbon$position, predictPositions=MD81_depth$V1,iterations=100000,extractDate=-58)
writeMat('MD81_Bchron.mat',depth=run$predictPositions,age_model=run$thetaPredict)
ages=BchronCalibrate(ages=MD81_radiocarbon$ages, ageSds=MD81_radiocarbon$ageSds, calCurves=MD81_radiocarbon$CalCurves)
writeMat('MD81_Bchron_ages.mat',age1=ages$date1$ageGrid,prob1=ages$date1$densities,age2=ages$date2$ageGrid,prob2=ages$date2$densities,age3=ages$date3$ageGrid,prob3=ages$date3$densities,age4=ages$date4$ageGrid,prob4=ages$date4$densities,age5=ages$date5$ageGrid,prob5=ages$date5$densities,age6=ages$date6$ageGrid,prob6=ages$date6$densities,age7=ages$date7$ageGrid,prob7=ages$date7$densities,age8=ages$date8$ageGrid,prob8=ages$date8$densities,age9=ages$date9$ageGrid,prob9=ages$date9$densities,age10=ages$date10$ageGrid,prob10=ages$date10$densities,age11=ages$date11$ageGrid,prob11=ages$date11$densities,age12=ages$date12$ageGrid,prob12=ages$date12$densities,age13=ages$date13$ageGrid,prob13=ages$date13$densities,age14=ages$date14$ageGrid,prob14=ages$date14$densities,age15=ages$date15$ageGrid,prob15=ages$date15$densities,age16=ages$date16$ageGrid,prob16=ages$date16$densities,age17=ages$date17$ageGrid,prob17=ages$date17$densities,age18=ages$date18$ageGrid,prob18=ages$date18$densities,age19=ages$date19$ageGrid,prob19=ages$date19$densities,age20=ages$date20$ageGrid,prob20=ages$date20$densities,age21=ages$date21$ageGrid,prob21=ages$date21$densities,age22=ages$date22$ageGrid,prob22=ages$date22$densities,age23=ages$date23$ageGrid,prob23=ages$date23$densities,age24=ages$date24$ageGrid,prob24=ages$date24$densities,age25=ages$date25$ageGrid,prob25=ages$date25$densities,age26=ages$date26$ageGrid,prob26=ages$date26$densities,age27=ages$date27$ageGrid,prob27=ages$date27$densities,age28=ages$date28$ageGrid,prob28=ages$date28$densities)
writeMat('MD81_Bchron.mat',depth=run$predictPositions,age_model=run$thetaPredict)
MD81_depth <- read.table("~/Desktop/MD81_depth_benthic.txt", quote="\"")
View(MD81_depth)
run=Bchronology(ages=MD81_radiocarbon$ages,ageSds=MD81_radiocarbon$ageSds, calCurves=MD81_radiocarbon$CalCurves,positions=MD81_radiocarbon$position, predictPositions=MD81_depth$V1,iterations=100000,extractDate=-58)
writeMat('MD81_benthic_Bchron.mat',depth=run$predictPositions,age_model=run$thetaPredict)
MD81_radiocarbon <- read.delim("~/Desktop/MD81_benthic_radiocarbon.txt")
MD81_depth <- read.table("~/Desktop/MD81_depth_benthic.txt", quote="\"")
run=Bchronology(ages=MD81_radiocarbon$ages,ageSds=MD81_radiocarbon$ageSds, calCurves=MD81_radiocarbon$CalCurves,positions=MD81_radiocarbon$position, predictPositions=MD81_depth$V1,iterations=100000,extractDate=-58)
writeMat('MD81_benthic_Bchron.mat',depth=run$predictPositions,age_model=run$thetaPredict)
library("Bchron", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
MD81_radiocarbon <- read.delim("~/Desktop/MD81_radiocarbon.txt")
MD81_depth <- read.table("~/Desktop/MD81_depth_benthic.txt", quote="\"")
run=Bchronology(ages=MD81_radiocarbon$ages,ageSds=MD81_radiocarbon$ageSds, calCurves=MD81_radiocarbon$CalCurves,positions=MD81_radiocarbon$position, predictPositions=MD81_depth$V1,iterations=100000,extractDate=-58)
install.packages(rjags)
install.packages('rjags')
library("rjags", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library('rjags')
library("rjags", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages('coda')
install.packages("coda")
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("coda", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rjags", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library('rjags')
library("rjags", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
.Platform$pkgType
library('rjags')
install.packages('rjags')
library('rjags')
install.packages('rjags')
library('rjags')
library("Bchron", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:Bchron", unload=TRUE)
library("rjags", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
library("IRkernel", lib.loc="/Users/deborahkhider/Library/R/3.1/library")
install.packages("Bchron")
R.matlab
install.packages("R.matlab")
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
library("IRdisplay", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
IRkernel::installspec()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages("libzmq3")
install.packages("cppzmq")
install.packages("libzmq4")
install.packages("libzmq")
install.packages("base64enc")
install.packages(c("czmq", "zmq"))
library("rzmq", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("base64enc", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("rzmq")
library("rzmq", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("repr")
library("rzmq", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"),
repos = c('http://irkernel.github.io/', getOption('repos')))
library("rzmq", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:rzmq", unload=TRUE)
library("rzmq", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:rzmq", unload=TRUE)
install.packages("rzmq")
install.packages("IRKernel")
install.packages(c("repr", "IRkernel", "IRdisplay"),
repos = c('http://irkernel.github.io/', getOption('repos')))
library("IRkernel", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
IRKernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
print("hello world")
install.packages('Bchron')
install.packages(“devtools”)
install.packages("devtools)
install.packages("devtools)
""
install.packages("devtools")
library(devtools)
install_github("chrismheiser/lipdR")
install_github("nickmckay/geoChronR")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocGenerics")
biocLite("pcaMethods")
install_github("nickmckay/geoChronR")
library(devtools)
install_github("nickmckay/geoChronR")
library("geoChronR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
ls("geoChronR:ts")
ls("package:ts")
ls("Bchron:ts")
library("Bchron", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
ls("Bchron:ts")
ls(getNamespace("geoChronR"), all.names=TRUE)
library("Bchron", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
intall.packages("KernSmooth")
install.packages("KernSmooth")
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(geoChronR)
citation(GeoChronR)
citation(geoChronR)
citation("geoChronR")
getwd()
x<-1
x
print(x)
msg <- "hello"
x<-1:20
x
iL
1L
0/0
y<-c(1.7,"a")
?read.table
x<-c("a",'b',"c")
x[1]
x[2:3]
x[x>"a"]
x <-c(1,2,NA,5,NA)
y<-c(NA,3,4,NA,NA)
good <- complete.cases(x,y)
x[good]
?complete.cases
x<-4
class(x)
x <- c(4, TRUE)
class(x)
x <- c(1,3, 5)
y <- c(3, 2, 10)
rbind(x, y)
x <- list(2, "a", "b", TRUE)
x[[2]]
v <- x[[2]]
class(v)
w <- x[2]
x <- 1:4
y <- 2
x+y
v<-x+y
class(v)
x <- c(3, 5, 1, 10, 12, 6)
x[x < 6] == 0
x[x < 6] <- 0
setwd("/Volumes/Media HD/Documents/Coursera/datasciencecoursera/ProgrammingWithR")
v<-read.csv(hw1_data.csv)
v<-read.csv("hw1_data.csv")
v[2,]
?read.csv
v<-read.csv("hw1_data.csv",header=TRUE)
v
v[2,]
v[1:2,]
dim(v)
v[152:153,]
v[47,]
t<-v[ozone]
t<-v["Ozone"]
f<-is.na(t)
w<-t[f]
w<-t[!f]
mean(w)
a<-v["Ozone">31 & "Temp">90]
a<-v["Ozone">31 &$ "Temp">90]
a<-v["Ozone">31 && "Temp">90]
View(a)
v<-read.csv("hw1_data.csv",header=TRUE)
indices <- which(v$Ozone>31 & v$Temp>90)
a <-v[indices]
a <-v[indices,]
mean(a$Solar.R)
indices <-which(a$Month==6)
View(v)
View(v)
indices <-which(v$Month==6)
a<-v[indices,]
mean(a$Temp)
indices <-which(v$Month==5)
a<-v[indices,]
max(a$Ozone)
bad<-is.na(a$Ozone)
t<-a$Ozone[!bad]
max(t)
