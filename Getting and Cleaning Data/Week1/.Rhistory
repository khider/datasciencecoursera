1+1
install.packages("Bchron")
.libPaths()
library(Bchron)
Bchronmenu()
library(Bchron)
Bchronmenu
Bchronmenu()
install.packages("Bchron")
install.packages("Bchron")
install.packages("Bchron")
.libPaths()
install.packages("Bchron")
install.packages("Bchron")
library(Bchron)
Bchronmenu
Bchronmenu()
Bchronmenu()
library(Bchron)
data(Glendalough)
GlenOut = Bchronology(ages=Glendalough$ages,ageSds=Glendalough$ageSds, calCurves=Glendalough$calCurves,positions=Glendalough$position, positionThicknesses=Glendalough$thickness,ids=Glendalough$id, predictPositions=seq(0,1500,by=10), iterations=10000)
help(Bchronology)
GlenOut = Bchronology(ages=Glendalough$ages,ageSds=Glendalough$ageSds, calCurves=Glendalough$calCurves,positions=Glendalough$position, positionThicknesses=Glendalough$thickness,ids=Glendalough$id, predictPositions=seq(0,1500,by=10), iterations=100000)
View(Glendalough)
data(Glendalough)
GlenOut = Bchronology(ages=Glendalough$ages,ageSds=Glendalough$ageSds, calCurves=Glendalough$calCurves,positions=Glendalough$position, positionThicknesses=Glendalough$thickness,ids=Glendalough$id, predictPositions=seq(0,1500,by=10), iterations=100000)
library(Bchron)
library("R.matlab", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
MD81_radiocarbon <- read.delim("~/Desktop/MD81_radiocarbon.txt")
MD81_depth <- read.table("~/Desktop/MD81_depth.txt", quote="\"")
run=Bchronology(ages=MD81_radiocarbon$ages,ageSds=MD81_radiocarbon$ageSds, calCurves=MD81_radiocarbon$CalCurves,positions=MD81_radiocarbon$position, predictPositions=MD81_depth$V1,iterations=100000,extractDate=-58)
writeMat('MD81_Bchron.mat',depth=run$predictPositions,age_model=run$thetaPredict)
ages=BchronCalibrate(ages=MD81_radiocarbon$ages, ageSds=MD81_radiocarbon$ageSds, calCurves=MD81_radiocarbon$CalCurves)
writeMat('MD81_Bchron_ages.mat',age1=ages$date1$ageGrid,prob1=ages$date1$densities,age2=ages$date2$ageGrid,prob2=ages$date2$densities,age3=ages$date3$ageGrid,prob3=ages$date3$densities,age4=ages$date4$ageGrid,prob4=ages$date4$densities,age5=ages$date5$ageGrid,prob5=ages$date5$densities,age6=ages$date6$ageGrid,prob6=ages$date6$densities,age7=ages$date7$ageGrid,prob7=ages$date7$densities,age8=ages$date8$ageGrid,prob8=ages$date8$densities,age9=ages$date9$ageGrid,prob9=ages$date9$densities,age10=ages$date10$ageGrid,prob10=ages$date10$densities,age11=ages$date11$ageGrid,prob11=ages$date11$densities,age12=ages$date12$ageGrid,prob12=ages$date12$densities,age13=ages$date13$ageGrid,prob13=ages$date13$densities,age14=ages$date14$ageGrid,prob14=ages$date14$densities,age15=ages$date15$ageGrid,prob15=ages$date15$densities,age16=ages$date16$ageGrid,prob16=ages$date16$densities,age17=ages$date17$ageGrid,prob17=ages$date17$densities,age18=ages$date18$ageGrid,prob18=ages$date18$densities,age19=ages$date19$ageGrid,prob19=ages$date19$densities,age20=ages$date20$ageGrid,prob20=ages$date20$densities,age21=ages$date21$ageGrid,prob21=ages$date21$densities,age22=ages$date22$ageGrid,prob22=ages$date22$densities,age23=ages$date23$ageGrid,prob23=ages$date23$densities,age24=ages$date24$ageGrid,prob24=ages$date24$densities,age25=ages$date25$ageGrid,prob25=ages$date25$densities,age26=ages$date26$ageGrid,prob26=ages$date26$densities,age27=ages$date27$ageGrid,prob27=ages$date27$densities,age28=ages$date28$ageGrid,prob28=ages$date28$densities)
writeMat('MD81_Bchron.mat',depth=run$predictPositions,age_model=run$thetaPredict)
MD81_depth <- read.table("~/Desktop/MD81_depth_benthic.txt", quote="\"")
View(MD81_depth)
run=Bchronology(ages=MD81_radiocarbon$ages,ageSds=MD81_radiocarbon$ageSds, calCurves=MD81_radiocarbon$CalCurves,positions=MD81_radiocarbon$position, predictPositions=MD81_depth$V1,iterations=100000,extractDate=-58)
writeMat('MD81_benthic_Bchron.mat',depth=run$predictPositions,age_model=run$thetaPredict)
MD81_radiocarbon <- read.delim("~/Desktop/MD81_benthic_radiocarbon.txt")
MD81_depth <- read.table("~/Desktop/MD81_depth_benthic.txt", quote="\"")
run=Bchronology(ages=MD81_radiocarbon$ages,ageSds=MD81_radiocarbon$ageSds, calCurves=MD81_radiocarbon$CalCurves,positions=MD81_radiocarbon$position, predictPositions=MD81_depth$V1,iterations=100000,extractDate=-58)
writeMat('MD81_benthic_Bchron.mat',depth=run$predictPositions,age_model=run$thetaPredict)
library("Bchron", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
MD81_radiocarbon <- read.delim("~/Desktop/MD81_radiocarbon.txt")
MD81_depth <- read.table("~/Desktop/MD81_depth_benthic.txt", quote="\"")
run=Bchronology(ages=MD81_radiocarbon$ages,ageSds=MD81_radiocarbon$ageSds, calCurves=MD81_radiocarbon$CalCurves,positions=MD81_radiocarbon$position, predictPositions=MD81_depth$V1,iterations=100000,extractDate=-58)
install.packages(rjags)
install.packages('rjags')
library("rjags", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library('rjags')
library("rjags", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages('coda')
install.packages("coda")
library("lattice", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("coda", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library("rjags", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library('rjags')
library("rjags", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
.Platform$pkgType
library('rjags')
install.packages('rjags')
library('rjags')
install.packages('rjags')
library('rjags')
library("Bchron", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:Bchron", unload=TRUE)
library("rjags", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
library("IRkernel", lib.loc="/Users/deborahkhider/Library/R/3.1/library")
install.packages("Bchron")
R.matlab
install.packages("R.matlab")
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
library("IRdisplay", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
IRkernel::installspec()
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages("libzmq3")
install.packages("cppzmq")
install.packages("libzmq4")
install.packages("libzmq")
install.packages("base64enc")
install.packages(c("czmq", "zmq"))
library("rzmq", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library("base64enc", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("rzmq")
library("rzmq", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages("repr")
library("rzmq", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"),
repos = c('http://irkernel.github.io/', getOption('repos')))
library("rzmq", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:rzmq", unload=TRUE)
library("rzmq", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
detach("package:rzmq", unload=TRUE)
install.packages("rzmq")
install.packages("IRKernel")
install.packages(c("repr", "IRkernel", "IRdisplay"),
repos = c('http://irkernel.github.io/', getOption('repos')))
library("IRkernel", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
IRKernel::installspec()
IRkernel::installspec()
IRkernel::installspec()
print("hello world")
install.packages('Bchron')
install.packages(“devtools”)
install.packages("devtools)
install.packages("devtools)
""
install.packages("devtools")
library(devtools)
install_github("chrismheiser/lipdR")
install_github("nickmckay/geoChronR")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocGenerics")
biocLite("pcaMethods")
install_github("nickmckay/geoChronR")
library(devtools)
install_github("nickmckay/geoChronR")
library("geoChronR", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
ls("geoChronR:ts")
ls("package:ts")
ls("Bchron:ts")
library("Bchron", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
ls("Bchron:ts")
ls(getNamespace("geoChronR"), all.names=TRUE)
library("Bchron", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
intall.packages("KernSmooth")
install.packages("KernSmooth")
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
library(geoChronR)
citation(GeoChronR)
citation(geoChronR)
citation("geoChronR")
library(datasets)
data("iris")
?iris
s<-split(iris, iris$Species)
mean(s$virginica$Sepal.Length)
$near
?near
round(mean(s$virginica$Sepal.Length))
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
datat(mtcars)
data("mtcars")
?mtcars
sapply(split(mtcars$mpg, mtcars$cyl), mean)
apply(mtcars, 2, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
split(mtcars, mtcars$cyl)
mean(mtcars$mpg, mtcars$cyl)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(mtcars, cyl, mean)
s2<-split(mtcars,mtcars$cyl)
mean(s2$`8`$hp)-mean(s2$`4`$hp)
round(abs(mean(s2$`8`$hp)-mean(s2$`4`$hp)))
debug(ls)
ls
set.seed(1)
rpois(5, 2)
library("Bchron", lib.loc="/Library/Frameworks/R.framework/Versions/3.2/Resources/library")
data(Glendalough)
GlenOut = Bchronology(ages=Glendalough$ages,ageSds=Glendalough$ageSds,
calCurves=Glendalough$calCurves,positions=Glendalough$position,
positionThicknesses=Glendalough$thickness,ids=Glendalough$id,
predictPositions=seq(0,1500,by=10))
setwd('/Volumes/Media HD/Documents/Coursera/datasciencecoursera/Getting and Cleaning Data/Week1')
library(xlsx)
data<-read.xlsx('Gasdata.xlsx')
data<-read.xlsx('Gasdata.xlsx', sheetIndex=1)
data<-read.xlsx('Gasdata.xlsx', sheetIndex=1,colIndex=c(18,23),rowIndex=c(7,15))
data<-read.xlsx('Gasdata.xlsx', sheetIndex=1,colIndex=18:23,rowIndex=7:15)
data<-read.xlsx('Gasdata.xlsx', sheetIndex=1,colIndex=18:23,rowIndex=7:15)
data<-read.xlsx('Gasdata.xlsx', sheetIndex=1)
View(data)
dat<-read.xlsx('Gasdata.xlsx', sheetIndex=1,rowIndex=18:23,colIndex=7:15)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages(XML)
install.packages(xml)
install.packages('XML')
library(XML)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml','restaurants.xml',method='curl')
doc<-xmlTreeParse('restaurants.xml')
rootNode <-xmlRoot(doc)
xmlSApply(rootNode,xmlValue)
data2<-xmlSApply(rootNode,xmlValue)
rootNode[[1]]
xpathSApply(doc,"//zipcode")
xpathSApply(doc,"//zipcode",xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
xpathSApply(rootNode,"//name",xmlValue)
rootNode[[1]]
xpathSApply(rootNode,"//zipcode",xmlValue)
names(rootNode)
doc<-xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml', useInternal=TRUE)
doc<-xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml')
roothNode[[1]][[1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[1]]
rootNode[[1]][[1]][[2]]
xmlSApply(rootNode,xmlValue)
xpathSApply(rootNode,"//zipcode")
xpathSApply(rootNode,"//zipcode",xmlValue)
xpathSApply(dac,"//li[@class=zipcode",xmlValue)
xpathSApply(doc,"//li[@class=zipcode",xmlValue)
doc<-xmlTreeParse('restaurants.xml',useInternalNodes = TRUE)
doc<-xmlTreeParse('restaurants.xml',useInternalNodes = TRUE)
rootNode[[1]]
rootNode[[1]][[1]]
rootNode[[1]][[1]][[2]]
zip <-xpathSApply(rootNode,'//zipcode',xmlValue)
doc<-xmlTreeParse('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml',useInternalNodes = TRUE)
rootNode <-xmlRoot(doc)
doc<-xmlTreeParse('restaurants.xml',useInternalNodes = TRUE)
doc<-xmlTreeParse('restaurants.xml',useInternalNodes = TRUE)
doc<-xmlTreeParse('restaurants.xml',useInternalNodes = TRUE)
rootNode <-xmlRoot(doc)
zipcode <- xpathSApply(rootNode,"//zipcode",xmlValue)
zipcode <- xpathSApply(rootNode,"//zipcode",xmlValue)
length(zipcode[zipcode==21231])
install.packages('data.table')
DT <- fread(input="fsspid.csv", sep=",")
library(data.table)
DT <- fread(input="fsspid.csv", sep=",")
DT <- fread(input="Idaho.csv", sep=",")
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv','Idaho.csv',method='curl')
DT <- fread(input="Idaho.csv", sep=",")
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1], rowMeans(DT)[DT$SEX==2])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]
data = read.csv('surveydata.csv')
value <- data[data$VAL>=1000000,]
View(value)
value$VAL
length(data$VAL[!is.na(data$VAL) & data$VAL==24])
